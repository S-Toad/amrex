<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1Mask" kind="class" language="C++" prot="public">
    <compoundname>amrex::Mask</compoundname>
    <basecompoundref refid="classamrex_1_1BaseFab" prot="public" virt="non-virtual">amrex::BaseFab&lt; int &gt;</basecompoundref>
    <includes refid="AMReX__Mask_8H" local="no">AMReX_Mask.H</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Mask_1a5c614b68bcc988e86e52c106c20c5d59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>() noexcept</argsstring>
        <name>Mask</name>
        <briefdescription>
<para>default constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ad5e143382d0d4ac3525494db523432ee" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(const Box &amp;bx, int nc=1, bool alloc=true, bool shared=false)</argsstring>
        <name>Mask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>alloc</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>shared</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>allocating constructor (nc=number of components) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nc</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shared</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="12" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a6b295b191764969c7033a967abd45d97" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>Mask</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>construct from input stream </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="52" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ad02006dde1ef4ca41a75811a92bf13e4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Mask::Mask</definition>
        <argsstring>(Array4&lt; int &gt; const &amp;a) noexcept</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="55" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a9e0cfc8f510bbf07e9f0594a4c9fc2a4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Mask::Mask</definition>
        <argsstring>(Array4&lt; int &gt; const &amp;a, IndexType t) noexcept</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="58" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a4670e88b006383b4e03c316766396277" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Mask::Mask</definition>
        <argsstring>(Array4&lt; int const  &gt; const &amp;a) noexcept</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="61" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a335d200f394ffaf88181dec440362382" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Mask::Mask</definition>
        <argsstring>(Array4&lt; int const  &gt; const &amp;a, IndexType t) noexcept</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="64" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1aeef7181e2e8e18b348ae7318eff3b402" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Mask::~Mask</definition>
        <argsstring>() noexcept</argsstring>
        <name>~Mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="67" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1aa1437a1b1611cb70a4d8c6a581c7a5bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(Mask &amp;&amp;rhs) noexcept=default</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a42404772901ea5f0d3a72d98fc48497d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(Mask const &amp;rhs, MakeType make_type, int scomp, int ncomp)</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>make_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="71" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="19" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ab3bc08bd2f3deea5af111c3720a02b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(const Mask &amp;)=delete</argsstring>
        <name>Mask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a2d7bc995fb1eddf4211d4e93d63d9534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask&amp; amrex::Mask::operator=</definition>
        <argsstring>(const Mask &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ac8e651aa7881ce8282167ad72e4a1af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask&amp; amrex::Mask::operator=</definition>
        <argsstring>(Mask &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1aa99a533ca8b84883dd44bf870fb7c5b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Mask::readFrom</definition>
        <argsstring>(std::istream &amp;)</argsstring>
        <name>readFrom</name>
        <param>
          <type>std::istream &amp;</type>
          <defname>is</defname>
        </param>
        <briefdescription>
<para>initialize from stream, FAB-style </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="88" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="88" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a5ef706f693c3efeb1fcc340c89ad612f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Mask::writeOn</definition>
        <argsstring>(std::ostream &amp;) const </argsstring>
        <name>writeOn</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>os</defname>
        </param>
        <briefdescription>
<para>output to stream, FAB-style </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="100" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1aa6769e9167061ce48e444aca6efd800f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Mask&amp; amrex::Mask::operator&amp;=</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place And operator </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="104" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a1bb3b49bc6ea2c47ce34db8fb209c5a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place And </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="112" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1adcec3ef81cd69f40c714c0d1a92e19b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, but specify source/destination/number of components </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="123" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="229" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1adbe91cdeb110d0b83127d973ac92e52f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, and specify subregion </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="137" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="239" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1add6c7c686aad084be695958f087ce90e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>in-pace And, over source components to destination components, and on intersection of source and destination boxes </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="154" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="250" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1af447fa28de90bdab6394beef1c05f8a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Mask&amp; amrex::Mask::operator|=</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place Or operator </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="162" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1acaf4a5daa782e03347aa2f8e1c52dfe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place Or </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="170" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="279" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a3debac1afe2f7bb2df0401740ded27a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, but specify source/destination/number of components </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="181" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="286" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1afe2e5ccc3407fc3fc9179e0758db8d59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, and specify subregion </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="195" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="296" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a4283ca7929da1212105b9d2b26c87546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>in-pace Or, over source components to destination components, and on intersection of source and destination boxes </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="212" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="307" bodyend="332"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1Mask_1abfff64dce9dca205fc9d3fdde790dc44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, Mask &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <defname>is</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
<para>Initialize from stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="82" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="53" bodyend="75"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Mask_1ae8ef1e1e84d4d8e51b1b765e0f057de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Mask &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>os</defname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
<para>output to stream </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="94" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="29" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> is a derived Fab class whose elements maintain a logical &quot;TRUE&quot; or &quot;FALSE&quot; state. A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> can perform several elementary logical operations on its data members.</para><para>Implement a logical class <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> to maintain the TRUE or FALSE state of elements in a box. A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> can perform element-wise logical operations, but is otherwise very similar to an <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> object. A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> object can set its components based on comparing (a subregion of a) real-valued <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> element magnitudes to a scalar value, or by &quot;and&quot;, &quot;or&quot; operations with (the a subregion of) other Masks.</para><para>This class does NOT provide a copy constructor or assignment operator. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3949">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="3950" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3948">
        <label>amrex::Mask</label>
        <link refid="classamrex_1_1Mask"/>
        <childnode refid="3949" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3950">
        <label>amrex::BaseFabData&lt; int &gt;</label>
        <link refid="structamrex_1_1BaseFabData"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3952">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="3953" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3955">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="3955" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="3954">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="3955" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="3956" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="3956">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="3951">
        <label>amrex::Mask</label>
        <link refid="classamrex_1_1Mask"/>
        <childnode refid="3952" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3953">
        <label>amrex::BaseFabData&lt; int &gt;</label>
        <link refid="structamrex_1_1BaseFabData"/>
        <childnode refid="3954" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="28" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="25" bodyend="218"/>
    <listofallmembers>
      <member refid="classamrex_1_1BaseFab_1a6849b96b03bd3d30025bd1b5c9078d4d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a1027f21c4a0e2ffe5bf6f206e9d49954" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a2ab2a978d33c28dbee2132457d823ba9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1acc254398a2e6db0f13b649ac5adf02d1" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Accumulate</name></member>
      <member refid="classamrex_1_1BaseFab_1a0c5a1b6e347c1a20dbc7ab0858780b5c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>addFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a43b8f35b3e9ac0e15827bd12ec276e99" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>addproduct</name></member>
      <member refid="classamrex_1_1BaseFab_1ac90d062f7eaef0f2a2179d53bb42c9ba" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>allocator_type</name></member>
      <member refid="classamrex_1_1Mask_1a1bb3b49bc6ea2c47ce34db8fb209c5a5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="classamrex_1_1Mask_1adcec3ef81cd69f40c714c0d1a92e19b3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="classamrex_1_1Mask_1adbe91cdeb110d0b83127d973ac92e52f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="classamrex_1_1Mask_1add6c7c686aad084be695958f087ce90e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="classamrex_1_1BaseFab_1a06e494140159d9f9ad07c89540a30ed6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1ad769bf0b7f005ba92664410d9a10d787" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a8e076e004be7054e3814046a611c1c71" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1aaf50929ad26192c2552538e9d1c73d93" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1ae74b099cfda4dd2a8dd2c4c57b4cbe1f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a11ab2d10eaa2189fd76b96dcfba04d7f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a2f3c324d9edeccf4853e34031372cad9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a738e7d3c65923939ef5cbda99fd067b6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a713d4542e4114c3fd7ddc30822eb4946" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1ac7893496966f89a21224066231874f45" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a1ff782be8e7a9f4c53a2e20cc68ec861" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1abf2b87cb609e86eec90b1f67e79c6d73" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a012bf403bb258d7c67eb6aee7b183975" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a5215bee03448e156dcd3c8dcf96dcf23" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a1ca14e812dfcf9b7d8c63786adac012b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a94721e31da594068d0db35a5a87a052f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="structamrex_1_1BaseFabData_1a5846ac0768d9d6934c192d589fdc0475" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFabData</name></member>
      <member refid="structamrex_1_1BaseFabData_1a12296e20c3bcddbd6901ba51e8cb8668" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFabData</name></member>
      <member refid="classamrex_1_1BaseFab_1a8e7849e9a20ca9f8186e1416e2281d58" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1a0a9bd4ca46e296a7c721f45c412688de" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>box</name></member>
      <member refid="classamrex_1_1BaseFab_1a310480829a3007f6c88c45709efe3eda" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>clear</name></member>
      <member refid="classamrex_1_1BaseFab_1aa732b02514d6d53e3e9c56e4deb8f2b2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>const_array</name></member>
      <member refid="classamrex_1_1BaseFab_1adf29111ad3614f25c4f238d279c0dddb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a60e596768177ee8a2f6c7af1ee6115fb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a2ce7ca8462f696224de649d887c643d9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a346e36656aafce0b4dd3d4b1952f6763" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1abd2e7e74f89bec4947c645f125273bb0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1ad5f2025f8806fe5aeb84326cd2d0e49f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1ae6618fc35fb5ce567d28b90e01660f9e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1aca163490c5bf398b7337af99b188473f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copyFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1aaf5b1f4572646d00c00969134ac0ab2d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copyToMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a9f1684831e7a407880df55f0f6ab76bf" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a787b6130090d4378a3b6f14c1bb5bdbf" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1abc75e436933ae2cc48596e0b9125d9fd" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a2d2c3e0d2fdc5c6de3e1e8aea1cdad92" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a170752cdcaeafa6f3cc7333c3899f458" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>define</name></member>
      <member refid="classamrex_1_1BaseFab_1a404c22e63d0407352522985855182f79" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1afa0e2f2c4e1b699805e001975cb37ffb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a20cc0897df82b44b4c300601eb67a777" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1afe2be8431dc8585e397e9498d0115974" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a84658af51735f8bb900205ce2fa78e31" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a6f6b582bcb1a9b2de7333cc508eab00e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a83b010f2bb70ae4d09214c29bb53fffa" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a79de51bbda1c943e603bb5c9823e51ae" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a426feaf23f83ff9d8dca6f0b3df930f6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="structamrex_1_1BaseFabData_1a004be47a38cb5df475b32595083287a3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>domain</name></member>
      <member refid="classamrex_1_1BaseFab_1ae011e091ee7cb2973299bde793261d23" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a517448df92ac85eb6dd01ff60b611394" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a90dd16d89e470e76956a736bc68cf126" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dotmask</name></member>
      <member refid="classamrex_1_1BaseFab_1a30f2a84047ffcb444f79011157cb76fc" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dotmask</name></member>
      <member refid="structamrex_1_1BaseFabData_1a18c921a6524bd14b6d5304528a4b5448" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dptr</name></member>
      <member refid="classamrex_1_1BaseFab_1aab46cc0b6aa45e05c39592b0384cc2f2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>elixir</name></member>
      <member refid="classamrex_1_1BaseFab_1af38847122261f88e18b9e01050e15ff3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1BaseFab_1ab4d236ad54193a2438a36b53c17899fa" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1a7d749e9997fc1f485f185fccd767d078" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1adf3d90b08140d4e6bff6360b060cb259" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1a73a93a323fa74ee5be3dae3636588815" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1abafcd837dcd6acbb7af2dcb7b9fd7721" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>ForEachIV</name></member>
      <member refid="classamrex_1_1BaseFab_1ae9cc90fe0c81f0404e0b9a727e65c974" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>ForEachIV</name></member>
      <member refid="classamrex_1_1BaseFab_1aabf3366443bc10930a76b4a05638e450" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a9bc32209251bd1a33f810db287e46c79" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a68d535d47f5413e2a58912f55c972c2c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>hiVect</name></member>
      <member refid="classamrex_1_1BaseFab_1ac16eb1eb43f8240cc6e36ba4359601bd" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>indexFromValue</name></member>
      <member refid="classamrex_1_1BaseFab_1ac4e83ccc822af4e2ef874c2a24df945e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1BaseFab_1adbf7d54bb9c765f9f06272e2d4d6f0ca" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1ab8b81613ee7a1f8b80672c8d094d2417" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a0a148b13f8142bb31745f07285aa611b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a36c3d354faed24236b3e094ae72c8771" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a8a35789589d3e90b24e8a20898886679" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>isAllocated</name></member>
      <member refid="classamrex_1_1BaseFab_1a6493ef6403a3da8ea1d86209a235332a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>isCopyOMPSafe</name></member>
      <member refid="classamrex_1_1BaseFab_1ab3d143ddea93bf9450967382eea4c977" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>length</name></member>
      <member refid="classamrex_1_1BaseFab_1acb6eaf155de035ca817141d4b7f28ebc" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>linComb</name></member>
      <member refid="classamrex_1_1BaseFab_1ac26dc390e5da41dfff0a4c9006f5942c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1aedeedcbc83f80beb3e5d1375303a1c10" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1afda7eb61628660e12d01899987f42d82" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>loVect</name></member>
      <member refid="classamrex_1_1Mask_1a5c614b68bcc988e86e52c106c20c5d59" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1ad5e143382d0d4ac3525494db523432ee" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a6b295b191764969c7033a967abd45d97" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1ad02006dde1ef4ca41a75811a92bf13e4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a9e0cfc8f510bbf07e9f0594a4c9fc2a4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a4670e88b006383b4e03c316766396277" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a335d200f394ffaf88181dec440362382" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1aa1437a1b1611cb70a4d8c6a581c7a5bf" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a42404772901ea5f0d3a72d98fc48497d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1ab3bc08bd2f3deea5af111c3720a02b9c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1BaseFab_1aba25418a88dd1d92fa0189c435b27c41" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskEQ</name></member>
      <member refid="classamrex_1_1BaseFab_1a84fb67d186335f35cc4fefe6863a3c18" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskGE</name></member>
      <member refid="classamrex_1_1BaseFab_1a2fab2ebb2cb1c39993ed7d064b84964c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskGT</name></member>
      <member refid="classamrex_1_1BaseFab_1ad6064dba7b265b71ace7cb38879b9542" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskLE</name></member>
      <member refid="classamrex_1_1BaseFab_1a8c0b43408a14bd94d972b581ddd1bcb6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskLT</name></member>
      <member refid="classamrex_1_1BaseFab_1a24449798262200b362e0139eecf927b0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1a18134ee325affebd9e6abff293466a90" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1a0dbbddfcf35a0034f46781d37ff44c6a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1aee91eb6b3c64af2c97eeeaf6a33b941f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1a23b4f663fb5f236781f02bd951669ea2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1ac38047cbf26db8e3fce9814211ea4a33" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1ac3603bcdede10dea6a1d371bd840bede" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a7b9a2e65796992c7bd94b3b0d6bef497" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1ac26dc0f6739756f1e82336b931e63d1f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1a763b83fd2a33885b656a229ae24a30eb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a060c551ab2dff43dc2359445026a37d1" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a3927a22e454c812177afce28022c95fc" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a2d0077345dc0b4e59c23f8121fbcd074" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a29bc61afb67bd1477c86624ae2b2f02d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a6de02b207d4bf37a892d35bf1431ad9c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a6d07d894ea7f920b4534ce34723c849d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a963430b029baa54f8a8e116f45f115ab" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a13bc65968d00f5485918d5002c26b21c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a1832093039c2d1e80e9ec8dd3a59fd4b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a63be87dae13c91fc45fdd1c728fd250b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1aab4bbb753a43578a56b9e0858e20f02b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1ab580538384bb79f9a91eccb3cefae2c5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1ac6f38a95959ab085c950fe7899e91524" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1aa659ee85d19db5cf4bbd376ee1c10072" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a9f72a23be765f8761b01e6568705dadd" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1aac43e2ff62959ad513625e5aaee05074" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1ab8252070df8fd2c1c40ec2b557a7d297" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1aadea060a8b27d585a491a41539613a73" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a6ee235f0da912950782bc3e4a81d9c46" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1a36f844cefc50661ff5a4189e16941fd1" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1a181a925719f91b201ef4ad8cfc9bef6f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nComp</name></member>
      <member refid="classamrex_1_1BaseFab_1a473fd1395073a26004e8329448322165" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nCompPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a3cfd39026f9df84b3fd3b214f10a22d8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a33c11ec14515a8f726540ba5b7de85cd" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a0136dd5e6dadac495aeaf3a95309dc8b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a7e581a18ff980ea8ab7a753cee5aa16b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a06300d87db22a48381c05e5266c0d99e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1aa9cc2aa6d856a87b74da14a2fbf2d961" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1ae268d85053cf2f3f7ce60e98eebffefb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>norminfmask</name></member>
      <member refid="classamrex_1_1BaseFab_1ab34e9d89932eca1c53e397251c3d6780" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>numPts</name></member>
      <member refid="structamrex_1_1BaseFabData_1a9e0d16aba820042ba77a256b3e342bc5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nvar</name></member>
      <member refid="classamrex_1_1Mask_1aa6769e9167061ce48e444aca6efd800f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator&amp;=</name></member>
      <member refid="classamrex_1_1BaseFab_1a694c10af3a755c63627374338cb6c115" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a70f96c86a682e589722cf1629e6c1eaf" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a7995b17d7091f203bb5997637bd42321" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1ac29a2f3dd3af67c204182e8b874d61c4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1af66167ca702992098700f54a85e2eff5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a6abcb8802e8085d323348b0a564cc518" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a0bd0d3e5d94abf3c7ba2f26c7bf6e644" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1a5349d45a75ccf7a39947284865cd6518" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1af46f032170d127b5036d72e610d219f4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1abecc31a0b51aefce92359121304c8c3d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1a3cdbe9d8e0329b9c2d301652d8cb0456" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1BaseFab_1a0e4db96136986b4ce29ac654f0c7f043" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1Mask_1ae8ef1e1e84d4d8e51b1b765e0f057de7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1Mask_1a2d7bc995fb1eddf4211d4e93d63d9534" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Mask_1ac8e651aa7881ce8282167ad72e4a1af3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a679eaffd38be1e6db15510e43f47f62d" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; int &gt;::"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a5ee31ec0870aadaec44887bb361a7153" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; int &gt;::"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a1dfd9beb7d4b14507956a7d9e1542fa3" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; int &gt;::"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Mask_1abfff64dce9dca205fc9d3fdde790dc44" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1Mask_1af447fa28de90bdab6394beef1c05f8a9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator|=</name></member>
      <member refid="classamrex_1_1Mask_1acaf4a5daa782e03347aa2f8e1c52dfe2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1Mask_1a3debac1afe2f7bb2df0401740ded27a0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1Mask_1afe2e5ccc3407fc3fc9179e0758db8d59" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1Mask_1a4283ca7929da1212105b9d2b26c87546" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1BaseFab_1a97efe897d8693374c34bb5ed8b5db81a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a3504bc88023e411789c240b677393ab2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a3166a2ef82b7ee2d2e9b98ddab2533d1" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ab3e17ba151030f16ee3106db77480f64" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a2e1ce15b8f568b409e6cf9adb157041b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ac8fed692f1e06f1c125693f40595b055" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1afe7ba4a89ae0ee113ab5c3183801b3cb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a3b3b226d991a4175fa3b4055092ab71f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a28dd2889d445c5aac9492f01cdeb90ec" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1aa8099b156fdb89d51201e60173eac042" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>preAllocatable</name></member>
      <member refid="classamrex_1_1BaseFab_1a9a052d86a27419d30336aaee8b6ce88d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1BaseFab_1afad5d49cd265f85fab10b868c90b3b1b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1BaseFab_1a08cabbb99b353f443964f38dc9fab00f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a6742231c398daf6ac1c79e4c048034f1" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a43fa6174aebbca1e84b62399b1675367" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a47b231a5c12c98402f4c99fb60b0215e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="structamrex_1_1BaseFabData_1a16e2d3ceee6c7fd51947348985ba86f8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>ptr_owner</name></member>
      <member refid="classamrex_1_1Mask_1aa99a533ca8b84883dd44bf870fb7c5b3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>readFrom</name></member>
      <member refid="classamrex_1_1BaseFab_1ae3aa191059d0d1330b38bf19ff693c8b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>resize</name></member>
      <member refid="classamrex_1_1BaseFab_1ab955b2ed7ee0318b51f653979ff32516" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1a3e381d7b32625dfc113c5b3b829d3f96" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1adfb422f342e5a2eeac37b1d4782f8520" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>SetBoxType</name></member>
      <member refid="classamrex_1_1BaseFab_1a79c8cc5add7bbb9dd6fcd1426b37a1a8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1BaseFab_1ab30980db8426914ba44d8d11c016b089" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setComplement</name></member>
      <member refid="structamrex_1_1BaseFabData_1aa826bfc656d07f0b2ab7c6a74a62b07a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setOwner</name></member>
      <member refid="classamrex_1_1BaseFab_1ad0c7a13178df49a7ba41e46bb0783c0e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1aafc91a51d46eae2614711db5a4b01df6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ac283cf1fe42171ea86abc05ba0cf9c13" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a3998162aa865535dcb3dba9f8d34cdc0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a7beb9a369fafae3d39401b2248bfa0f8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a749197499c8bb4797d0bfc7c51174d2a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a8923cf54bba727a2ee5f32d3017826c3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a444cec5fbeb023c22422114e80819375" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1aa15abbc2933dbafae91818c5ebd9179f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1abd6c34b444c59f8f7b92c8a707ccd3cc" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1addb0e86189e04fd0e21780b5ef64057c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIfNot</name></member>
      <member refid="structamrex_1_1BaseFabData_1a5894675ed07e11741a736c438bc03a02" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shared_memory</name></member>
      <member refid="classamrex_1_1BaseFab_1add09125c135593ec840ce389353dde59" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1a7cc7c2721b5522e89aaeba16a97e6648" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1adc6ef5b85da12c38d74657267f711048" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a0f5a0c7f0694221fbe9001dd791a8b48" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a3c4fdc9203ce901ef4d3cc3bf3b53bd7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>size</name></member>
      <member refid="classamrex_1_1BaseFab_1ab334cdc8913845a0e0a114a5d8e1cfdb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1a6f00122724f51809ce7b7bd3c814f648" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1a14b672bfc7258cf795da7eadf6d8922c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1a72ac47c0f2f3a1cf1675bcac0c8c4927" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1a7ad5556eb8143e3276465b71defe6664" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Transform</name></member>
      <member refid="classamrex_1_1BaseFab_1ae7a79b1162866af64db127dbcb710859" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Transform</name></member>
      <member refid="structamrex_1_1BaseFabData_1a377f301bd074d9ac12b092167603d64b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>truesize</name></member>
      <member refid="classamrex_1_1BaseFab_1af56ea1a25d68153c3c3ab8d325e8e837" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>value_type</name></member>
      <member refid="classamrex_1_1BaseFab_1ab09344e2e9acba12c76bccc56a4a1e10" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a7b90df2efcd001f66ed1405d20932e3b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a84104fc6e83de2314bef1b96c3e85385" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a98d40c00fe8a4571764e67fee06fb0b3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a6b65ef38f4f4db94b495a08d7ad5b705" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a5965fda49f11595f674e61419e09ce8b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1ad6f7eee77d9e3b01e16202c59d94f2fe" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1afe643008702c5dcce54c4587ae0a9e7c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1ab86ab0687e8d410a8fd997f8284831cc" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a33fbd4abeac5f9d9105699ccfcadfa4d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1Mask_1a5ef706f693c3efeb1fcc340c89ad612f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>writeOn</name></member>
      <member refid="classamrex_1_1BaseFab_1a29ccd85e0175b38f16f1038080efdf57" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>xpay</name></member>
      <member refid="classamrex_1_1BaseFab_1af07a75aa9f992b8e5e1b09fcebb05bfe" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>~BaseFab</name></member>
      <member refid="classamrex_1_1Mask_1aeef7181e2e8e18b348ae7318eff3b402" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>~Mask</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
