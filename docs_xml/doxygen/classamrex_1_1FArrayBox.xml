<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1FArrayBox" kind="class" language="C++" prot="public">
    <compoundname>amrex::FArrayBox</compoundname>
    <basecompoundref refid="classamrex_1_1BaseFab" prot="public" virt="non-virtual">amrex::BaseFab&lt; Real &gt;</basecompoundref>
    <derivedcompoundref refid="classamrex_1_1CutFab" prot="public" virt="non-virtual">amrex::CutFab</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1EBFArrayBox" prot="public" virt="non-virtual">amrex::EBFArrayBox</derivedcompoundref>
    <includes refid="AMReX__FArrayBox_8H" local="no">AMReX_FArrayBox.H</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1FArrayBox_1a1d09202fafedb82d79c005250c3cef2c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class FABio</definition>
        <argsstring></argsstring>
        <name>FABio</name>
        <briefdescription>
<para><ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> is a friend of ours. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="202" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FArrayBox_1af0dbc00602c50f34664b6c6cb39033be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const FArrayBox &amp;fb)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fb</declname>
        </param>
        <briefdescription>
<para>Write FABs in ASCII form. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="287" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="954" bodyend="960"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FArrayBox_1ad6e8fbbe92b476fd75bf5ace98418fa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, FArrayBox &amp;fb)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fb</declname>
        </param>
        <briefdescription>
<para>Read FABs in ASCII form. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="290" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="963" bodyend="970"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1a2d4b7df27f35926ab4a1377d5864aed8" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::initialized</definition>
        <argsstring></argsstring>
        <name>initialized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="396" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="396" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1a84a692c3807a4e2ab439841c70b1f004" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1abd2e3d292645433cefc947725585f87a" kindref="member">FabType</ref></type>
        <definition>FabType amrex::FArrayBox::m_type</definition>
        <argsstring></argsstring>
        <name>m_type</name>
        <initializer>= <ref refid="namespaceamrex_1abd2e3d292645433cefc947725585f87aaaf37d08ae228a87dc6b265fd1019c97d" kindref="member">FabType::regular</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="400" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="400" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1a8cb9b648353fe9b5fb90cdfccf5b0c89" prot="protected" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref></type>
        <definition>FABio::Format amrex::FArrayBox::format</definition>
        <argsstring></argsstring>
        <name>format</name>
        <briefdescription>
<para>Format and ordering for all FAB output. This stuff exists solely to support reading old FABs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="406" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1a9dd03f8360cfc2cfdf803298308f53dd" prot="protected" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39" kindref="member">FABio::Ordering</ref></type>
        <definition>FABio::Ordering amrex::FArrayBox::ordering</definition>
        <argsstring></argsstring>
        <name>ordering</name>
        <initializer>= <ref refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39a8db2674dc83889b0c41bf7a2de656e0b" kindref="member">FABio::FAB_NORMAL_ORDER</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="407" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1a7b3c6612330474e7db6e4f6ff9d4f380" prot="protected" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> *</type>
        <definition>FABio * amrex::FArrayBox::fabio</definition>
        <argsstring></argsstring>
        <name>fabio</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The <ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> pointer describing our output format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="410" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1ab0b477e69a1fe773b7467810181a3056" prot="protected" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::do_initval</definition>
        <argsstring></argsstring>
        <name>do_initval</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>initial value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="413" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1a6657471e6437a4acab5413ea8874ff39" prot="protected" static="yes" mutable="no">
        <type>Real</type>
        <definition>Real amrex::FArrayBox::initval</definition>
        <argsstring></argsstring>
        <name>initval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="414" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FArrayBox_1af56588e4621fc35eae763fcb44ad4633" prot="protected" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::init_snan</definition>
        <argsstring></argsstring>
        <name>init_snan</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="415" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="415" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1afc781bb81903fd65b313bcfb46d4aa14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FArrayBox::FArrayBox</definition>
        <argsstring>() noexcept</argsstring>
        <name>FArrayBox</name>
        <briefdescription>
<para>Construct an invalid FAB with no memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="205" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1af73b0b7e6c59ba302c00a3c116c041e8" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(const Box &amp;b, int ncomp=1, bool alloc=true, bool shared=false)</argsstring>
        <name>FArrayBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>alloc</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>shared</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Construct an initial FAB with the data space allocated but not inititialized. ncomp is the number of components (variables) at each data point in the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="212" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="156" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1aa2977b85f283b49740400daed8ffe97a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(const FArrayBox &amp;rhs, MakeType make_type, int scomp, int ncomp)</argsstring>
        <name>FArrayBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>make_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="217" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="166" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a46be1bc294541cf9d677f487baa07d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(const Box &amp;b, int ncomp, Real *p) noexcept</argsstring>
        <name>FArrayBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="219" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="172" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1ab9d3b69222db9fba7e76eefa32f4ce32" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(Array4&lt; Real &gt; const &amp;a) noexcept</argsstring>
        <name>FArrayBox</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="222" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="222" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1acbc4049baf15df08ea1af17e3b084bce" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(Array4&lt; Real &gt; const &amp;a, IndexType t) noexcept</argsstring>
        <name>FArrayBox</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="225" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a857d6be833fcf8cd638a28da1de97e36" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(Array4&lt; Real const  &gt; const &amp;a) noexcept</argsstring>
        <name>FArrayBox</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="228" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="228" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1af82dd0e87633c1b097481174ec58dc78" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(Array4&lt; Real const  &gt; const &amp;a, IndexType t) noexcept</argsstring>
        <name>FArrayBox</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="231" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="231" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1ae3a0d38865100d93d3c203db57198fb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::FArrayBox::~FArrayBox</definition>
        <argsstring>() noexcept</argsstring>
        <name>~FArrayBox</name>
        <briefdescription>
<para>The destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="235" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="235" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1ae822ed6d1bc48190941617842d212243" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(FArrayBox &amp;&amp;rhs) noexcept=default</argsstring>
        <name>FArrayBox</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a862dcdbd4fbb34b292075f2c7bf44428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FArrayBox::FArrayBox</definition>
        <argsstring>(const FArrayBox &amp;)=delete</argsstring>
        <name>FArrayBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a6f8accb8be245e6873219b15a933f431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        <definition>FArrayBox&amp; amrex::FArrayBox::operator=</definition>
        <argsstring>(const FArrayBox &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1aa68151c4f96270d35a9cde2a4ff53fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        <definition>FArrayBox&amp; amrex::FArrayBox::operator=</definition>
        <argsstring>(FArrayBox &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1afb23955cc5c661e8f041ea1864c1b35c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        <definition>FArrayBox &amp; amrex::FArrayBox::operator=</definition>
        <argsstring>(Real r) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>Real</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Set the fab to the value r. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="244" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="179" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a0950587ec6e53ece5805ffb5ab71cf60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::initVal</definition>
        <argsstring>() noexcept</argsstring>
        <name>initVal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="246" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="187" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a49c25c07e7176c493eb665b9e2e398a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::contains_nan</definition>
        <argsstring>() const noexcept</argsstring>
        <name>contains_nan</name>
        <briefdescription>
<para>Are there any NaNs in the FAB? This may return false, even if the FAB contains NaNs, if the machine doesn&apos;t support the appropriate NaN testing functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="252" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="423" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a7a62cc8b6838504d75764f9dfb3bec64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::FArrayBox::contains_nan</definition>
        <argsstring>(const Box &amp;bx, int scomp, int ncomp) const noexcept</argsstring>
        <name>contains_nan</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="255" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="438" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a33bd0aad6c687d9207f7f7d64df00702" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::contains_nan</definition>
        <argsstring>(IntVect &amp;where) const noexcept</argsstring>
        <name>contains_nan</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>These versions return the cell index (though not the component) of the first location of a NaN if there is one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="260" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="466" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1af50a85491d30e726465d81fd29b56790" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::contains_nan</definition>
        <argsstring>(const Box &amp;bx, int scomp, int ncomp, IntVect &amp;where) const noexcept</argsstring>
        <name>contains_nan</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>where</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="262" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="473" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a528be1634802dbdf8bfd0f4874fa2b95" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::contains_inf</definition>
        <argsstring>() const noexcept</argsstring>
        <name>contains_inf</name>
        <briefdescription>
<para>Are there any Infs in the FAB? This may return false, even if the FAB contains Infs, if the machine doesn&apos;t support the appropriate Inf testing functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="268" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="502" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1abd3718223bf47554bbf03c303e0e0c12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::FArrayBox::contains_inf</definition>
        <argsstring>(const Box &amp;bx, int scomp, int ncomp) const noexcept</argsstring>
        <name>contains_inf</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="271" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="517" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a3b32fddc97c624d7965f6a2ff1a133a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::contains_inf</definition>
        <argsstring>(IntVect &amp;where) const noexcept</argsstring>
        <name>contains_inf</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>where</declname>
        </param>
        <briefdescription>
<para>These versions return the cell index (though not the component) of the first location of an Inf if there is one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="276" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="545" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a96eabf866abf113295533d4ca7ab5700" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::contains_inf</definition>
        <argsstring>(const Box &amp;bx, int scomp, int ncomp, IntVect &amp;where) const noexcept</argsstring>
        <name>contains_inf</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>where</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="278" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="552" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1ae5a4b9b9a64a4c1cfd534bb6eefc6b30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::resize</definition>
        <argsstring>(const Box &amp;b, int N=1)</argsstring>
        <name>resize</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>For debugging purposes we hide <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> version and do some extra work. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="281" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="216" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a3e62ab0dcf6c751e94e34f25bcc3c50b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1abd2e3d292645433cefc947725585f87a" kindref="member">FabType</ref></type>
        <definition>FabType amrex::FArrayBox::getType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="284" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="284" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1abb6e149e86e4063464a54a87b6eb0a98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::writeOn</definition>
        <argsstring>(std::ostream &amp;of) const </argsstring>
        <name>writeOn</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>of</declname>
        </param>
        <briefdescription>
<para>Writes out the FAB in whatever format you&apos;ve set. The default format is ASCII. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="296" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a8b18916c1151e0d296dc8eb676b591ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::writeOn</definition>
        <argsstring>(std::ostream &amp;of, int comp, int num_comp=1) const </argsstring>
        <name>writeOn</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>of</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Write only selected range of components. comp specifies from which component (starting at 0) to write at each point in space. num_comp specifies how many data points to write out at each point is space <ndash/> it defaults to 1. It must be the case the comp &gt;= 0 &amp;&amp; num_comp &gt;= 1 &amp;&amp; (comp+num_comp) &lt;= <ref refid="classamrex_1_1BaseFab_1a181a925719f91b201ef4ad8cfc9bef6f" kindref="member">nComp()</ref>. The FAB is written out in whatever format you&apos;ve set, with the default format being ASCII. The FAB that is written to disk will be an num_comp component FAB. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="309" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="621" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a8a42f4fe7d3ad41e56175103deec42e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::readFrom</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>readFrom</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Read FAB from istream. Format is as it was written out. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="314" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="633" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1ac5f3bc40906e22d2e481fa87114b62f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::FArrayBox::readFrom</definition>
        <argsstring>(std::istream &amp;is, int compIndex)</argsstring>
        <name>readFrom</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>int</type>
          <declname>compIndex</declname>
        </param>
        <briefdescription>
<para>Read FAB from istream. Format is as it was written out. This creates a single component FAB with data from compIndex of the FAB from the istream. Returns the number of components available in the fab. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="322" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="643" bodyend="657"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a30357415a1823591985d8a6434d296c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::FArrayBox::skipFAB</definition>
        <argsstring>(std::istream &amp;is, int &amp;num_comp)</argsstring>
        <name>skipFAB</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>num_comp</declname>
        </param>
        <briefdescription>
<para>Skip over the next FAB from the input stream. Return the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> defining the domain of the FAB and the number of components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="329" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="661" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1aadcc71b9080373f0846157aa5955c78c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::skipFAB</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>skipFAB</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Skip over the next FAB from the input stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="333" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="250" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a6dd6c1696dd87f8345826bc2ca97cf56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::setFormat</definition>
        <argsstring>(FABio::Format fmt)</argsstring>
        <name>setFormat</name>
        <param>
          <type><ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref></type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
<para>Set the <ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref> in the program. This is the preferred way to set the output format in &quot;new&quot; FABs. When desiging new programs, this should be the only function that needs to be called in order to set the format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="342" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="257" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1aba9fe48668a79af0c5805d77472c467d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref></type>
        <definition>FABio::Format amrex::FArrayBox::getFormat</definition>
        <argsstring>()</argsstring>
        <name>getFormat</name>
        <briefdescription>
<para>Gets the <ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref> set in the program. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="345" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a52578eab1d0f7cc7547af989033e82b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::setOrdering</definition>
        <argsstring>(FABio::Ordering ordering)</argsstring>
        <name>setOrdering</name>
        <param>
          <type><ref refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39" kindref="member">FABio::Ordering</ref></type>
          <declname>ordering</declname>
        </param>
        <briefdescription>
<para>Set the <ref refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39" kindref="member">FABio::Ordering</ref> for reading old FABs. It does NOT set the ordering for output. This is deprecated. It exists only to facilitate reading old FABs. When you&apos;re reading in an &quot;old&quot; FAB, you must set the Ordering, before attempting to read it in. This is because FABs written out in the &quot;old&quot; format weren&apos;t self-describing; i.e. information such as the Ordering was lost when the &quot;old&quot; FAB was written out. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="358" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="294" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1aaa904e14fc1335783b62f47ad001348e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39" kindref="member">FABio::Ordering</ref></type>
        <definition>FABio::Ordering amrex::FArrayBox::getOrdering</definition>
        <argsstring>()</argsstring>
        <name>getOrdering</name>
        <briefdescription>
<para>Gets the <ref refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39" kindref="member">FABio::Ordering</ref> set in the program. This is deprecated. It does NOT do the right thing with the new FAB I/O format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="365" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="301" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a767556bba83027cac8eeecd67726aab8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::setPrecision</definition>
        <argsstring>(FABio::Precision precision)</argsstring>
        <name>setPrecision</name>
        <param>
          <type><ref refid="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660" kindref="member">FABio::Precision</ref></type>
          <declname>precision</declname>
        </param>
        <briefdescription>
<para>Set the <ref refid="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660" kindref="member">FABio::Precision</ref>. This is deprecated. It is not useful with the &quot;new&quot; FAB I/O format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="371" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a35de13164243364f3ed296772f0b750a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660" kindref="member">FABio::Precision</ref></type>
        <definition>FABio::Precision amrex::FArrayBox::getPrecision</definition>
        <argsstring>()</argsstring>
        <name>getPrecision</name>
        <briefdescription>
<para>Returns the <ref refid="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660" kindref="member">FABio::Precision</ref>. This is deprecated. It is not useful with the &quot;new&quot; FAB I/O format. Always returns FABio::Float. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="378" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="314" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a67fb916342e7c929641dbde731b8aa1b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> &amp;</type>
        <definition>const FABio &amp; amrex::FArrayBox::getFABio</definition>
        <argsstring>()</argsstring>
        <name>getFABio</name>
        <briefdescription>
<para>Returns reference to the <ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> object used by the program. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="381" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a7a5acc633fa80ec1cb999be2c4bbdc02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::setFABio</definition>
        <argsstring>(FABio *rd)</argsstring>
        <name>setFABio</name>
        <param>
          <type><ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> *</type>
          <declname>rd</declname>
        </param>
        <briefdescription>
<para>Sets the <ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> object used by the program. It is an error if the passed pointer rd is the null pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="387" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="236" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1adebebb841a716183dc9e48ee95a37aec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::set_do_initval</definition>
        <argsstring>(bool tf)</argsstring>
        <name>set_do_initval</name>
        <param>
          <type>bool</type>
          <declname>tf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="389" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="321" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1af073981013bb7c213dd103b9935f9809" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FArrayBox::get_do_initval</definition>
        <argsstring>()</argsstring>
        <name>get_do_initval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="390" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1aca0e59c4e500ac53bacf12280c67f225" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::FArrayBox::set_initval</definition>
        <argsstring>(Real iv)</argsstring>
        <name>set_initval</name>
        <param>
          <type>Real</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="391" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="335" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1aab5bd155e6cda0d5f6b61d1820ae5a8f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::FArrayBox::get_initval</definition>
        <argsstring>()</argsstring>
        <name>get_initval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="392" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a35b1135bdf17ab4f4022cf60745ade37" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
<para>Initialize from <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> with &quot;fab&quot; prefix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="394" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="349" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FArrayBox_1a0e43c0beef959593d4253805a22b6abc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FArrayBox::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="395" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="449" bodyend="454"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Fortran Array of REALs. </para>    </briefdescription>
    <detaileddescription>
<para>Fortran Array <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>&apos;s (generally called FAB&apos;s) are objects constructed to emulate the FORTRAN array. Useful operations can be performed upon FAB&apos;s in C++, and they provide a convenient interface to FORTRAN when it is necessary to retreat into that language.</para><para><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> is derived from <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab&lt;Real&gt;</ref>. <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> adds additional useful capabilities which make sense for Real types, such as I/O and L**p norms.</para><para><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref>&apos;s may be output in various formats (see <ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref> above).</para><para>The format and precision may be set in a file read by the <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> class by the &quot;fab.format&quot; variable. Allowed values are: ASCII 8BIT NATIVE NATIVE_32 IEEE32</para><para>FABs written using operator&lt;&lt; are always written in ASCII. FABS written using writOn use the <ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref> specified with setFormat or the <ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref> specified in the <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> file read by init. If the <ref refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" kindref="member">FABio::Format</ref> is not set explicitly by either of these two methods, then it defaults to NATIVE.</para><para>The C pre-processor macro AMREX_SPACEDIM must be defined to use this class. The internal precision of FARRAYBOX objects is set by defining either BL_USE_FLOAT or BL_USE_DOUBLE</para><para>This class does NOT provide a copy constructor or assignment operator, but it has a move constructor. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1972">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="1973" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1973">
        <label>amrex::BaseFabData&lt; Real &gt;</label>
        <link refid="structamrex_1_1BaseFabData"/>
      </node>
      <node id="1975">
        <label>amrex::EBFArrayBox</label>
        <link refid="classamrex_1_1EBFArrayBox"/>
        <childnode refid="1971" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1974">
        <label>amrex::CutFab</label>
        <link refid="classamrex_1_1CutFab"/>
        <childnode refid="1971" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1971">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="1972" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1977">
        <label>amrex::BaseFab&lt; Real &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="1978" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1978">
        <label>amrex::BaseFabData&lt; Real &gt;</label>
        <link refid="structamrex_1_1BaseFabData"/>
        <childnode refid="1979" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="1980">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="1980" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="1983">
        <label>Real</label>
      </node>
      <node id="1979">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="1980" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="1981" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="1981">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="1982">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
      <node id="1976">
        <label>amrex::FArrayBox</label>
        <link refid="classamrex_1_1FArrayBox"/>
        <childnode refid="1977" relation="public-inheritance">
        </childnode>
        <childnode refid="1982" relation="usage">
          <edgelabel>fabio</edgelabel>
        </childnode>
        <childnode refid="1983" relation="usage">
          <edgelabel>initval</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="200" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="197" bodyend="416"/>
    <listofallmembers>
      <member refid="classamrex_1_1BaseFab_1a6849b96b03bd3d30025bd1b5c9078d4d" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a1027f21c4a0e2ffe5bf6f206e9d49954" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a2ab2a978d33c28dbee2132457d823ba9" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1acc254398a2e6db0f13b649ac5adf02d1" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>Accumulate</name></member>
      <member refid="classamrex_1_1BaseFab_1a0c5a1b6e347c1a20dbc7ab0858780b5c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>addFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a43b8f35b3e9ac0e15827bd12ec276e99" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>addproduct</name></member>
      <member refid="classamrex_1_1BaseFab_1ac90d062f7eaef0f2a2179d53bb42c9ba" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>allocator_type</name></member>
      <member refid="classamrex_1_1BaseFab_1a06e494140159d9f9ad07c89540a30ed6" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1ad769bf0b7f005ba92664410d9a10d787" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a8e076e004be7054e3814046a611c1c71" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1aaf50929ad26192c2552538e9d1c73d93" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1ae74b099cfda4dd2a8dd2c4c57b4cbe1f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a11ab2d10eaa2189fd76b96dcfba04d7f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a2f3c324d9edeccf4853e34031372cad9" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a738e7d3c65923939ef5cbda99fd067b6" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a713d4542e4114c3fd7ddc30822eb4946" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1ac7893496966f89a21224066231874f45" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a1ff782be8e7a9f4c53a2e20cc68ec861" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1abf2b87cb609e86eec90b1f67e79c6d73" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a012bf403bb258d7c67eb6aee7b183975" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a5215bee03448e156dcd3c8dcf96dcf23" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a1ca14e812dfcf9b7d8c63786adac012b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a94721e31da594068d0db35a5a87a052f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFab</name></member>
      <member refid="structamrex_1_1BaseFabData_1a5846ac0768d9d6934c192d589fdc0475" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFabData</name></member>
      <member refid="structamrex_1_1BaseFabData_1a12296e20c3bcddbd6901ba51e8cb8668" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>BaseFabData</name></member>
      <member refid="classamrex_1_1BaseFab_1a8e7849e9a20ca9f8186e1416e2281d58" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1a0a9bd4ca46e296a7c721f45c412688de" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>box</name></member>
      <member refid="classamrex_1_1BaseFab_1a310480829a3007f6c88c45709efe3eda" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>clear</name></member>
      <member refid="classamrex_1_1BaseFab_1aa732b02514d6d53e3e9c56e4deb8f2b2" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>const_array</name></member>
      <member refid="classamrex_1_1BaseFab_1adf29111ad3614f25c4f238d279c0dddb" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a60e596768177ee8a2f6c7af1ee6115fb" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1FArrayBox_1a528be1634802dbdf8bfd0f4874fa2b95" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_inf</name></member>
      <member refid="classamrex_1_1FArrayBox_1abd3718223bf47554bbf03c303e0e0c12" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_inf</name></member>
      <member refid="classamrex_1_1FArrayBox_1a3b32fddc97c624d7965f6a2ff1a133a3" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_inf</name></member>
      <member refid="classamrex_1_1FArrayBox_1a96eabf866abf113295533d4ca7ab5700" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_inf</name></member>
      <member refid="classamrex_1_1FArrayBox_1a49c25c07e7176c493eb665b9e2e398a1" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_nan</name></member>
      <member refid="classamrex_1_1FArrayBox_1a7a62cc8b6838504d75764f9dfb3bec64" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_nan</name></member>
      <member refid="classamrex_1_1FArrayBox_1a33bd0aad6c687d9207f7f7d64df00702" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_nan</name></member>
      <member refid="classamrex_1_1FArrayBox_1af50a85491d30e726465d81fd29b56790" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>contains_nan</name></member>
      <member refid="classamrex_1_1BaseFab_1a2ce7ca8462f696224de649d887c643d9" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a346e36656aafce0b4dd3d4b1952f6763" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1abd2e7e74f89bec4947c645f125273bb0" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1ad5f2025f8806fe5aeb84326cd2d0e49f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1ae6618fc35fb5ce567d28b90e01660f9e" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1aca163490c5bf398b7337af99b188473f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>copyFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1aaf5b1f4572646d00c00969134ac0ab2d" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>copyToMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a9f1684831e7a407880df55f0f6ab76bf" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a787b6130090d4378a3b6f14c1bb5bdbf" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1abc75e436933ae2cc48596e0b9125d9fd" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a2d2c3e0d2fdc5c6de3e1e8aea1cdad92" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a170752cdcaeafa6f3cc7333c3899f458" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>define</name></member>
      <member refid="classamrex_1_1BaseFab_1a404c22e63d0407352522985855182f79" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1afa0e2f2c4e1b699805e001975cb37ffb" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a20cc0897df82b44b4c300601eb67a777" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1afe2be8431dc8585e397e9498d0115974" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a84658af51735f8bb900205ce2fa78e31" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a6f6b582bcb1a9b2de7333cc508eab00e" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a83b010f2bb70ae4d09214c29bb53fffa" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a79de51bbda1c943e603bb5c9823e51ae" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a426feaf23f83ff9d8dca6f0b3df930f6" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1FArrayBox_1ab0b477e69a1fe773b7467810181a3056" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>do_initval</name></member>
      <member refid="structamrex_1_1BaseFabData_1a004be47a38cb5df475b32595083287a3" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>domain</name></member>
      <member refid="classamrex_1_1BaseFab_1ae011e091ee7cb2973299bde793261d23" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a517448df92ac85eb6dd01ff60b611394" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a90dd16d89e470e76956a736bc68cf126" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dotmask</name></member>
      <member refid="classamrex_1_1BaseFab_1a30f2a84047ffcb444f79011157cb76fc" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dotmask</name></member>
      <member refid="structamrex_1_1BaseFabData_1a18c921a6524bd14b6d5304528a4b5448" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>dptr</name></member>
      <member refid="classamrex_1_1BaseFab_1aab46cc0b6aa45e05c39592b0384cc2f2" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>elixir</name></member>
      <member refid="classamrex_1_1FArrayBox_1a7b3c6612330474e7db6e4f6ff9d4f380" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>fabio</name></member>
      <member refid="classamrex_1_1FArrayBox_1a1d09202fafedb82d79c005250c3cef2c" prot="private" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FABio</name></member>
      <member refid="classamrex_1_1FArrayBox_1afc781bb81903fd65b313bcfb46d4aa14" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1af73b0b7e6c59ba302c00a3c116c041e8" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1aa2977b85f283b49740400daed8ffe97a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1a46be1bc294541cf9d677f487baa07d68" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1ab9d3b69222db9fba7e76eefa32f4ce32" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1acbc4049baf15df08ea1af17e3b084bce" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1a857d6be833fcf8cd638a28da1de97e36" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1af82dd0e87633c1b097481174ec58dc78" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1ae822ed6d1bc48190941617842d212243" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1a862dcdbd4fbb34b292075f2c7bf44428" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>FArrayBox</name></member>
      <member refid="classamrex_1_1FArrayBox_1a0e43c0beef959593d4253805a22b6abc" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1BaseFab_1ab4d236ad54193a2438a36b53c17899fa" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1a7d749e9997fc1f485f185fccd767d078" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1adf3d90b08140d4e6bff6360b060cb259" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1a73a93a323fa74ee5be3dae3636588815" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1abafcd837dcd6acbb7af2dcb7b9fd7721" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>ForEachIV</name></member>
      <member refid="classamrex_1_1BaseFab_1ae9cc90fe0c81f0404e0b9a727e65c974" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>ForEachIV</name></member>
      <member refid="classamrex_1_1FArrayBox_1a8cb9b648353fe9b5fb90cdfccf5b0c89" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>format</name></member>
      <member refid="classamrex_1_1FArrayBox_1af073981013bb7c213dd103b9935f9809" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>get_do_initval</name></member>
      <member refid="classamrex_1_1FArrayBox_1aab5bd155e6cda0d5f6b61d1820ae5a8f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>get_initval</name></member>
      <member refid="classamrex_1_1FArrayBox_1a67fb916342e7c929641dbde731b8aa1b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>getFABio</name></member>
      <member refid="classamrex_1_1FArrayBox_1aba9fe48668a79af0c5805d77472c467d" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>getFormat</name></member>
      <member refid="classamrex_1_1FArrayBox_1aaa904e14fc1335783b62f47ad001348e" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>getOrdering</name></member>
      <member refid="classamrex_1_1FArrayBox_1a35de13164243364f3ed296772f0b750a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>getPrecision</name></member>
      <member refid="classamrex_1_1FArrayBox_1a3e62ab0dcf6c751e94e34f25bcc3c50b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>getType</name></member>
      <member refid="classamrex_1_1BaseFab_1aabf3366443bc10930a76b4a05638e450" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a9bc32209251bd1a33f810db287e46c79" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a68d535d47f5413e2a58912f55c972c2c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>hiVect</name></member>
      <member refid="classamrex_1_1BaseFab_1ac16eb1eb43f8240cc6e36ba4359601bd" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>indexFromValue</name></member>
      <member refid="classamrex_1_1FArrayBox_1af56588e4621fc35eae763fcb44ad4633" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>init_snan</name></member>
      <member refid="classamrex_1_1FArrayBox_1a35b1135bdf17ab4f4022cf60745ade37" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1FArrayBox_1a2d4b7df27f35926ab4a1377d5864aed8" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>initialized</name></member>
      <member refid="classamrex_1_1FArrayBox_1a6657471e6437a4acab5413ea8874ff39" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>initval</name></member>
      <member refid="classamrex_1_1FArrayBox_1a0950587ec6e53ece5805ffb5ab71cf60" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>initVal</name></member>
      <member refid="classamrex_1_1BaseFab_1adbf7d54bb9c765f9f06272e2d4d6f0ca" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1ab8b81613ee7a1f8b80672c8d094d2417" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a0a148b13f8142bb31745f07285aa611b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a36c3d354faed24236b3e094ae72c8771" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a8a35789589d3e90b24e8a20898886679" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>isAllocated</name></member>
      <member refid="classamrex_1_1BaseFab_1a6493ef6403a3da8ea1d86209a235332a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>isCopyOMPSafe</name></member>
      <member refid="classamrex_1_1BaseFab_1ab3d143ddea93bf9450967382eea4c977" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>length</name></member>
      <member refid="classamrex_1_1BaseFab_1acb6eaf155de035ca817141d4b7f28ebc" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>linComb</name></member>
      <member refid="classamrex_1_1BaseFab_1ac26dc390e5da41dfff0a4c9006f5942c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1aedeedcbc83f80beb3e5d1375303a1c10" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1afda7eb61628660e12d01899987f42d82" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>loVect</name></member>
      <member refid="classamrex_1_1FArrayBox_1a84a692c3807a4e2ab439841c70b1f004" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>m_type</name></member>
      <member refid="classamrex_1_1BaseFab_1aba25418a88dd1d92fa0189c435b27c41" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maskEQ</name></member>
      <member refid="classamrex_1_1BaseFab_1a84fb67d186335f35cc4fefe6863a3c18" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maskGE</name></member>
      <member refid="classamrex_1_1BaseFab_1a2fab2ebb2cb1c39993ed7d064b84964c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maskGT</name></member>
      <member refid="classamrex_1_1BaseFab_1ad6064dba7b265b71ace7cb38879b9542" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maskLE</name></member>
      <member refid="classamrex_1_1BaseFab_1a8c0b43408a14bd94d972b581ddd1bcb6" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maskLT</name></member>
      <member refid="classamrex_1_1BaseFab_1a24449798262200b362e0139eecf927b0" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1a18134ee325affebd9e6abff293466a90" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1a0dbbddfcf35a0034f46781d37ff44c6a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1aee91eb6b3c64af2c97eeeaf6a33b941f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1a23b4f663fb5f236781f02bd951669ea2" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1ac38047cbf26db8e3fce9814211ea4a33" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1ac3603bcdede10dea6a1d371bd840bede" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a7b9a2e65796992c7bd94b3b0d6bef497" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1ac26dc0f6739756f1e82336b931e63d1f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1a763b83fd2a33885b656a229ae24a30eb" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a060c551ab2dff43dc2359445026a37d1" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a3927a22e454c812177afce28022c95fc" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a2d0077345dc0b4e59c23f8121fbcd074" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a29bc61afb67bd1477c86624ae2b2f02d" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a6de02b207d4bf37a892d35bf1431ad9c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a6d07d894ea7f920b4534ce34723c849d" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a963430b029baa54f8a8e116f45f115ab" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a13bc65968d00f5485918d5002c26b21c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a1832093039c2d1e80e9ec8dd3a59fd4b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a63be87dae13c91fc45fdd1c728fd250b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1aab4bbb753a43578a56b9e0858e20f02b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1ab580538384bb79f9a91eccb3cefae2c5" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1ac6f38a95959ab085c950fe7899e91524" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1aa659ee85d19db5cf4bbd376ee1c10072" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a9f72a23be765f8761b01e6568705dadd" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1aac43e2ff62959ad513625e5aaee05074" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1ab8252070df8fd2c1c40ec2b557a7d297" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1aadea060a8b27d585a491a41539613a73" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a6ee235f0da912950782bc3e4a81d9c46" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1a36f844cefc50661ff5a4189e16941fd1" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1a181a925719f91b201ef4ad8cfc9bef6f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>nComp</name></member>
      <member refid="classamrex_1_1BaseFab_1a473fd1395073a26004e8329448322165" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>nCompPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a3cfd39026f9df84b3fd3b214f10a22d8" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a33c11ec14515a8f726540ba5b7de85cd" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a0136dd5e6dadac495aeaf3a95309dc8b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a7e581a18ff980ea8ab7a753cee5aa16b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a06300d87db22a48381c05e5266c0d99e" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1aa9cc2aa6d856a87b74da14a2fbf2d961" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1ae268d85053cf2f3f7ce60e98eebffefb" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>norminfmask</name></member>
      <member refid="classamrex_1_1BaseFab_1ab34e9d89932eca1c53e397251c3d6780" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>numPts</name></member>
      <member refid="structamrex_1_1BaseFabData_1a9e0d16aba820042ba77a256b3e342bc5" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>nvar</name></member>
      <member refid="classamrex_1_1BaseFab_1a694c10af3a755c63627374338cb6c115" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a70f96c86a682e589722cf1629e6c1eaf" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a7995b17d7091f203bb5997637bd42321" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1ac29a2f3dd3af67c204182e8b874d61c4" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1af66167ca702992098700f54a85e2eff5" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a6abcb8802e8085d323348b0a564cc518" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a0bd0d3e5d94abf3c7ba2f26c7bf6e644" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1a5349d45a75ccf7a39947284865cd6518" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1af46f032170d127b5036d72e610d219f4" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1abecc31a0b51aefce92359121304c8c3d" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1a3cdbe9d8e0329b9c2d301652d8cb0456" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1BaseFab_1a0e4db96136986b4ce29ac654f0c7f043" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1FArrayBox_1af0dbc00602c50f34664b6c6cb39033be" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1FArrayBox_1a6f8accb8be245e6873219b15a933f431" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FArrayBox_1aa68151c4f96270d35a9cde2a4ff53fc5" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FArrayBox_1afb23955cc5c661e8f041ea1864c1b35c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a679eaffd38be1e6db15510e43f47f62d" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; Real &gt;::"><scope>amrex::FArrayBox</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a5ee31ec0870aadaec44887bb361a7153" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; Real &gt;::"><scope>amrex::FArrayBox</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FArrayBox_1ad6e8fbbe92b476fd75bf5ace98418fa6" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1FArrayBox_1a9dd03f8360cfc2cfdf803298308f53dd" prot="protected" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>ordering</name></member>
      <member refid="classamrex_1_1BaseFab_1a97efe897d8693374c34bb5ed8b5db81a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a3504bc88023e411789c240b677393ab2" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a3166a2ef82b7ee2d2e9b98ddab2533d1" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ab3e17ba151030f16ee3106db77480f64" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a2e1ce15b8f568b409e6cf9adb157041b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ac8fed692f1e06f1c125693f40595b055" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1afe7ba4a89ae0ee113ab5c3183801b3cb" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a3b3b226d991a4175fa3b4055092ab71f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a28dd2889d445c5aac9492f01cdeb90ec" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1aa8099b156fdb89d51201e60173eac042" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>preAllocatable</name></member>
      <member refid="classamrex_1_1BaseFab_1a9a052d86a27419d30336aaee8b6ce88d" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1BaseFab_1afad5d49cd265f85fab10b868c90b3b1b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1BaseFab_1a08cabbb99b353f443964f38dc9fab00f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a6742231c398daf6ac1c79e4c048034f1" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a43fa6174aebbca1e84b62399b1675367" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a47b231a5c12c98402f4c99fb60b0215e" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>protected_divide</name></member>
      <member refid="structamrex_1_1BaseFabData_1a16e2d3ceee6c7fd51947348985ba86f8" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>ptr_owner</name></member>
      <member refid="classamrex_1_1FArrayBox_1a8a42f4fe7d3ad41e56175103deec42e1" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>readFrom</name></member>
      <member refid="classamrex_1_1FArrayBox_1ac5f3bc40906e22d2e481fa87114b62f4" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>readFrom</name></member>
      <member refid="classamrex_1_1FArrayBox_1ae5a4b9b9a64a4c1cfd534bb6eefc6b30" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>resize</name></member>
      <member refid="classamrex_1_1BaseFab_1ab955b2ed7ee0318b51f653979ff32516" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1a3e381d7b32625dfc113c5b3b829d3f96" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1FArrayBox_1adebebb841a716183dc9e48ee95a37aec" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>set_do_initval</name></member>
      <member refid="classamrex_1_1FArrayBox_1aca0e59c4e500ac53bacf12280c67f225" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>set_initval</name></member>
      <member refid="classamrex_1_1BaseFab_1adfb422f342e5a2eeac37b1d4782f8520" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>SetBoxType</name></member>
      <member refid="classamrex_1_1BaseFab_1a79c8cc5add7bbb9dd6fcd1426b37a1a8" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1BaseFab_1ab30980db8426914ba44d8d11c016b089" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1FArrayBox_1a7a5acc633fa80ec1cb999be2c4bbdc02" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setFABio</name></member>
      <member refid="classamrex_1_1FArrayBox_1a6dd6c1696dd87f8345826bc2ca97cf56" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setFormat</name></member>
      <member refid="classamrex_1_1FArrayBox_1a52578eab1d0f7cc7547af989033e82b6" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setOrdering</name></member>
      <member refid="structamrex_1_1BaseFabData_1aa826bfc656d07f0b2ab7c6a74a62b07a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setOwner</name></member>
      <member refid="classamrex_1_1FArrayBox_1a767556bba83027cac8eeecd67726aab8" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setPrecision</name></member>
      <member refid="classamrex_1_1BaseFab_1ad0c7a13178df49a7ba41e46bb0783c0e" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1aafc91a51d46eae2614711db5a4b01df6" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ac283cf1fe42171ea86abc05ba0cf9c13" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a3998162aa865535dcb3dba9f8d34cdc0" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a7beb9a369fafae3d39401b2248bfa0f8" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a749197499c8bb4797d0bfc7c51174d2a" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a8923cf54bba727a2ee5f32d3017826c3" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a444cec5fbeb023c22422114e80819375" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1aa15abbc2933dbafae91818c5ebd9179f" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1abd6c34b444c59f8f7b92c8a707ccd3cc" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1addb0e86189e04fd0e21780b5ef64057c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>setValIfNot</name></member>
      <member refid="structamrex_1_1BaseFabData_1a5894675ed07e11741a736c438bc03a02" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>shared_memory</name></member>
      <member refid="classamrex_1_1BaseFab_1add09125c135593ec840ce389353dde59" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1a7cc7c2721b5522e89aaeba16a97e6648" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1adc6ef5b85da12c38d74657267f711048" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a0f5a0c7f0694221fbe9001dd791a8b48" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a3c4fdc9203ce901ef4d3cc3bf3b53bd7" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>size</name></member>
      <member refid="classamrex_1_1FArrayBox_1a30357415a1823591985d8a6434d296c1" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>skipFAB</name></member>
      <member refid="classamrex_1_1FArrayBox_1aadcc71b9080373f0846157aa5955c78c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>skipFAB</name></member>
      <member refid="classamrex_1_1BaseFab_1ab334cdc8913845a0e0a114a5d8e1cfdb" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1a6f00122724f51809ce7b7bd3c814f648" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1a14b672bfc7258cf795da7eadf6d8922c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1a72ac47c0f2f3a1cf1675bcac0c8c4927" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1a7ad5556eb8143e3276465b71defe6664" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>Transform</name></member>
      <member refid="classamrex_1_1BaseFab_1ae7a79b1162866af64db127dbcb710859" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>Transform</name></member>
      <member refid="structamrex_1_1BaseFabData_1a377f301bd074d9ac12b092167603d64b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>truesize</name></member>
      <member refid="classamrex_1_1BaseFab_1af56ea1a25d68153c3c3ab8d325e8e837" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>value_type</name></member>
      <member refid="classamrex_1_1BaseFab_1ab09344e2e9acba12c76bccc56a4a1e10" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a7b90df2efcd001f66ed1405d20932e3b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a84104fc6e83de2314bef1b96c3e85385" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a98d40c00fe8a4571764e67fee06fb0b3" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a6b65ef38f4f4db94b495a08d7ad5b705" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a5965fda49f11595f674e61419e09ce8b" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1ad6f7eee77d9e3b01e16202c59d94f2fe" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1afe643008702c5dcce54c4587ae0a9e7c" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1ab86ab0687e8d410a8fd997f8284831cc" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a33fbd4abeac5f9d9105699ccfcadfa4d" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>view</name></member>
      <member refid="classamrex_1_1FArrayBox_1abb6e149e86e4063464a54a87b6eb0a98" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>writeOn</name></member>
      <member refid="classamrex_1_1FArrayBox_1a8b18916c1151e0d296dc8eb676b591ce" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>writeOn</name></member>
      <member refid="classamrex_1_1BaseFab_1a29ccd85e0175b38f16f1038080efdf57" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>xpay</name></member>
      <member refid="classamrex_1_1BaseFab_1af07a75aa9f992b8e5e1b09fcebb05bfe" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>~BaseFab</name></member>
      <member refid="classamrex_1_1FArrayBox_1ae3a0d38865100d93d3c203db57198fb3" prot="public" virt="non-virtual"><scope>amrex::FArrayBox</scope><name>~FArrayBox</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
